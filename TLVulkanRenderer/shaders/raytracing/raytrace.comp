// Shader is looseley based on the ray tracing coding session by Inigo Quilez (www.iquilezles.org)

#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

#define PI 3.1415926535897
#define EPSILON 0.000001
#define MAXLEN 1000.0
#define RAYBOUNCES 2
#define REFLECTIONS false
#define REFLECTIONSTRENGTH 0.4
#define REFLECTIONFALLOFF 0.5

vec3 LIGHT_POS = vec3(0, 4, -2);

struct Camera
{
	vec3 position;   
	vec3 right;
	float aspectRatio;
	vec3 lookat;
	vec3 forward;
	vec3 up;
	float fov;
	vec2 pixelLength; 
};

Camera camera;

struct Triangle
{
	int id;
	int materialId;

	vec3 vert0;
	vec3 vert1;
	vec3 vert2;

	vec3 norm0;
	vec3 norm1;
	vec3 norm2;
};

struct Box
{
	mat4 transform;
	mat4 invTransform;
};

struct Ray
{
	vec3 origin;
	vec3 direction;
};

struct PathSegment {
	Ray ray;
	vec3 color;
	int pixelIndex;
	int remainingBounces;
	bool shouldTerminate;
};

struct Intersection {
	vec3 hitNormal;
	float t;
	vec3 hitPoint;
	int materialId;
};

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba8) uniform writeonly image2D resultImage;

layout (binding = 1) uniform UBO 
{
	vec3 lightPos;
	vec3 position;   
	vec3 right;
	vec3 lookat;
	vec3 forward;
	vec3 up;
	vec2 pixelLength; 
	float fov;
	float aspectRatio;
} ubo;


layout (std140, binding = 2) buffer TriangleIndices
{
	ivec4 indices[ ];
};

layout (std140, binding = 3) buffer TrianglePositions
{
	vec4 positions[ ];
};

layout (std140, binding = 4) buffer TriangleNormals
{
	vec4 normals[ ];
};

void reflectRay(inout vec3 rayD, in vec3 normal)
{
	rayD = rayD + 2.0 * -dot(normal, rayD) * normal;
}

// Lighting =========================================================

float lightDiffuse(vec3 normal, vec3 lightDir) 
{
	return clamp(dot(normal, lightDir), 0.1, 1.0);
}

float lightSpecular(vec3 normal, vec3 lightDir, float specularFactor)
{
	vec3 viewVec = normalize(ubo.position);
	vec3 halfVec = normalize(lightDir + viewVec);
	return pow(clamp(dot(normal, halfVec), 0.0, 1.0), specularFactor);
}

// Intersection helper ===========================================================


vec3 getPointOnRay(Ray r, float t) {
    return r.origin + (t - .0001f) * normalize(r.direction);
}

// Triangle ===========================================================

float triangleIntersect(
	in Triangle tri, 
	in Ray r,
	out vec3 normal,
	out vec3 hitPoint
	) 
{
	// Compute fast intersection using Muller and Trumbore, this skips computing the plane's equation.
	// See https://www.cs.virginia.edu/~gfx/Courses/2003/ImageSynthesis/papers/Acceleration/Fast%20MinimumStorage%20RayTriangle%20Intersection.pdf

	float t = -1.0;
	
	// Find the edges that share vertice 0
	vec3 edge1 = tri.vert1 - tri.vert0;
	vec3 edge2 = tri.vert2 - tri.vert0;

	// Being computing determinante. Store pvec for recomputation
	vec3 pvec = cross(r.direction, edge2);
	// If determinant is 0, ray lies in plane of triangle
	float det = dot(pvec, edge1);
	if (abs(det) < EPSILON) {
		return -1;
	}
	float inv_det = 1.0 / det;
	vec3 tvec = r.origin - tri.vert0;

	// u, v are the barycentric coordinates of the intersection point in the triangle
	// t is the distance between the ray's origin and the point of intersection
	float u, v;

	// Compute u
	u = dot(pvec, tvec) * inv_det;
	if (u < 0.0 || u > 1.0) {
		return -1;
	}

	// Compute v
	vec3 qvec = cross(tvec, edge1);
	v = dot(r.direction, qvec) * inv_det;
	if (v < 0.0 || (u + v) > 1.0) {
		return -1;
	}

	// Compute t
	t = dot(edge2, qvec) * inv_det;

	hitPoint = getPointOnRay(r, t);
	normal = normalize(tri.norm0 * (1 - u - v) + tri.norm1 * u + tri.norm2 * v);

	return t;
}

// Box ===========================================================

float boxIntersect(
	Box box, 
	Ray ray,
	out vec3 normal,
    out vec3 hitPoint
	) 
{

    float tmin = -1e38;
    float tmax = 1e38;
    vec3 tmin_n;
    vec3 tmax_n;
    
	for (int xyz = 0; xyz < 3; ++xyz) {
        float qdxyz = ray.direction[xyz];
        /*if (glm::abs(qdxyz) > 0.00001f)*/ {
            float t1 = (-0.5f - ray.origin[xyz]) / qdxyz;
            float t2 = (+0.5f - ray.origin[xyz]) / qdxyz;
            float ta = min(t1, t2);
            float tb = max(t1, t2);
            vec3 n;
            n[xyz] = t2 < t1 ? +1 : -1;
            if (ta > 0 && ta > tmin) {
                tmin = ta;
                tmin_n = n;
            }
            if (tb < tmax) {
                tmax = tb;
                tmax_n = n;
            }
        }
    }

    if (tmax >= tmin && tmax > 0) {
        if (tmin <= 0) {
            tmin = tmax;
            tmin_n = tmax_n;
        }
		hitPoint = getPointOnRay(ray, tmin);
		normal = vec3(tmin_n);
		return tmin;
    }
    return -1;
}

// Intersection ===========================================================

Intersection computeIntersections(
	int depth,
	in Ray ray
	)
{
	float tMin = MAXLEN;
	vec3 normal;
	vec3 hitPoint;
	int objectID = -1;
	Intersection intersection;

	// Triangles

	for (int i = 0; i < indices.length(); ++i) {
		
		// Reconstruct triangle
		Triangle tri;
		tri.id = i;
		tri.materialId = 0;
		tri.vert0 = vec3(positions[indices[i].x]);
		tri.vert1 = vec3(positions[indices[i].y]);
		tri.vert2 = vec3(positions[indices[i].z]);
		tri.norm0 = vec3(normals[indices[i].x]);
		tri.norm1 = vec3(normals[indices[i].y]);
		tri.norm2 = vec3(normals[indices[i].z]);
		
		vec3 tmp_normal;
		vec3 tmp_hitPoint;
		float tTri = triangleIntersect(tri, ray, tmp_normal, tmp_hitPoint);
		if ((tTri > EPSILON) && (tTri < tMin))
		{
			objectID = tri.id;
			tMin = tTri;
			normal = tmp_normal;
			hitPoint = tmp_hitPoint;
		}
	}

	if (objectID == -1)
	{
		intersection.t = -1.0;
	} else {
		intersection.t = tMin;
		intersection.materialId = 0;
		intersection.hitNormal = normal;
		intersection.hitPoint = hitPoint;
	}

	return intersection;
}

void shadeMaterial(
	int iter,
	in Intersection intersect,
	inout PathSegment path
	)
{
	if (path.remainingBounces > 0) {
		if (intersect.t > 0.0) {

			// Hit something

			vec3 pos = intersect.hitPoint;
			vec3 lightVec = normalize(LIGHT_POS - pos);				

			float diffuse = lightDiffuse(intersect.hitNormal, lightVec);
			path.color = vec3(1, 1, 0) * diffuse;	

			// Reflect ray for next render pass
			reflectRay(path.ray.direction, intersect.hitNormal);
			path.remainingBounces -= 1;
	

		} else {
			// Didn't hit anything
			path.remainingBounces = 0;
			path.color = vec3(0);
		}
	}
}

vec3 renderScene(inout PathSegment path)
{
	vec3 color = vec3(0.0);
	float t = MAXLEN;

	// Get intersected object ID
	int depth = 8;
	Intersection intersect = computeIntersections(depth, path.ray);
	depth++;
	
	shadeMaterial(0, intersect, path);

	return path.color;
}

// Generate ray ========================

void castRayFromCamera(in int width, in int height, inout Ray ray) 
{
	uint x = gl_GlobalInvocationID.x;
	uint y =  gl_GlobalInvocationID.y;
	if (x < width && y < height) {
		ray.origin = camera.position;
		ray.direction = normalize(
			camera.forward 
			- camera.right * camera.pixelLength.x * (float(x) - float(width) * 0.5)
			- camera.up * camera.pixelLength.y * (float(y) - float(height) * 0.5)
			);
	}
}

void main()
{

	ivec2 dim = imageSize(resultImage);
	vec2 uv = vec2(gl_GlobalInvocationID.xy) / dim;

	// Initialize camera
	camera.position = vec3(0.1,3.0,2.5);
	camera.right = vec3(1,0,0);
	camera.up = vec3(0,1,0);
	camera.aspectRatio = dim.x / dim.y;
	camera.lookat = vec3(0, 0, 0);
	camera.forward = normalize(camera.lookat - camera.position);
	camera.fov = 45.0;

	float yScaled = tan(camera.fov * PI / 180.0);
	float xScaled = yScaled * camera.aspectRatio;

	camera.pixelLength = vec2(2 * xScaled / float(dim.x), 2 * yScaled / float(dim.y));

	PathSegment path;
	path.color = vec3(0);
	path.pixelIndex = 0;
	path.remainingBounces = 8;
	path.shouldTerminate = false;

	castRayFromCamera(dim.x, dim.y, path.ray);		

	// Trace ray
	bool iterComplete = false;
	
	vec3 finalColor;
	while(!iterComplete) {
		finalColor = renderScene(path);
		iterComplete = true;
	}

	imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(finalColor, 0.0));
}
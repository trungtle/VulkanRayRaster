// Adapted from Sascha Willem's Vulkan examples: https://github.com/SaschaWillems/Vulkan/blob/master/data/shaders/raytracing/raytracing.comp
// Shader is looseley based on the ray tracing coding session by Inigo Quilez (www.iquilezles.org)

#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout(local_size_x = 16, local_size_y = 16) in;
layout(binding = 0) uniform writeonly image2D resultImage;

struct Camera
{
	vec3 pos;
	vec3 lookat;
	float fov;
}

layout(binding = 1) uniform struct
{
	vec3 lightPos;
	float aspectRatio;
	Camera camera;
} ubo;

struct Triangle
{
	int materialId;
	vec3 vert0;
	vec3 vert1;
	vec3 vert2;
	vec3 norm0;
	vec3 norm1;
	vec3 norm2;
}

layout(std140, binding = 2) buffer Triangles
{
	Triangle triangles[ ];
}

void main() {

	ivec2 pixelCoords = gl_GlobalInvocationID.xy;
	ivec2 dim = imageSize(resultImage);
	vec2 uv = vec2(pixelCoords) / vec2(dim);

	// Cast a ray from the camera
	vec3 rayOrigin = ubo.camera.pos;
	vec3 rayDirection = normalize(vec3((-1.0 + 2.0 * uv) * vec2(ubo.aspectRation, 1.0), -1.0));

	vec3 finalColor = vec3(1.0, 0, 0);

	imageStore(resultImage, pixelCoords, vec4(finalColor, 0.0));
}
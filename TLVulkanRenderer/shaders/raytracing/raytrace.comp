// Shader is looseley based on the ray tracing coding session by Inigo Quilez (www.iquilezles.org)

#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba8) uniform writeonly image2D resultImage;

#define EPSILON 0.000001
#define MAXLEN 1000.0
#define RAYBOUNCES 2
#define REFLECTIONS false
#define REFLECTIONSTRENGTH 0.4
#define REFLECTIONFALLOFF 0.5


struct Camera
{
	vec3 position;   
	vec3 right;
	float aspectRatio;
	vec3 lookat;
	vec3 forward;
	vec3 up;
	float fov;
	vec2 pixelLength; 
};

Camera camera;

layout (binding = 1) uniform UBO 
{
	vec3 lightPos;
	vec3 position;   
	vec3 right;
	vec3 lookat;
	vec3 forward;
	vec3 up;
	vec2 pixelLength; 
	float fov;
	float aspectRatio;
} ubo;

struct Triangle
{
	vec3 vert0;
	int id;
	vec3 vert1;
	int materialId;
	vec3 vert2;
};

struct Ray
{
	vec3 origin;
	vec3 direction;
};

layout (std140, binding = 2) buffer TriangleIndices
{
	ivec4 indices[ ];
};

layout (std140, binding = 3) buffer TriangleVertices
{
	vec4 vertices[ ];
};

void reflectRay(inout vec3 rayD, in vec3 normal)
{
	rayD = rayD + 2.0 * -dot(normal, rayD) * normal;
}

// Lighting =========================================================

float lightDiffuse(vec3 normal, vec3 lightDir) 
{
	return clamp(dot(normal, lightDir), 0.1, 1.0);
}

float lightSpecular(vec3 normal, vec3 lightDir, float specularFactor)
{
	vec3 viewVec = normalize(ubo.position);
	vec3 halfVec = normalize(lightDir + viewVec);
	return pow(clamp(dot(normal, halfVec), 0.0, 1.0), specularFactor);
}


// Triangle ===========================================================

float triangleIntersect(
	in Triangle tri, 
	in Ray r
	) 
{
	// Compute fast intersection using Muller and Trumbore, this skips computing the plane's equation.
	// See https://www.cs.virginia.edu/~gfx/Courses/2003/ImageSynthesis/papers/Acceleration/Fast%20MinimumStorage%20RayTriangle%20Intersection.pdf

	float t = -1.0;
	
	// Find the edges that share vertice 0
	vec3 edge1 = tri.vert1 - tri.vert0;
	vec3 edge2 = tri.vert2 - tri.vert0;

	// Being computing determinante. Store pvec for recomputation
	vec3 pvec = cross(r.direction, edge2);
	// If determinant is 0, ray lies in plane of triangle
	float det = dot(pvec, edge1);
	if (abs(det) < EPSILON) {
		return -1;
	}
	float inv_det = 1.0 / det;
	vec3 tvec = r.origin - tri.vert0;

	// u, v are the barycentric coordinates of the intersection point in the triangle
	// t is the distance between the ray's origin and the point of intersection
	float u, v;

	// Compute u
	u = dot(pvec, tvec) * inv_det;
	if (u < 0.0 || u > 1.0) {
		return -1;
	}

	// Compute v
	vec3 qvec = cross(tvec, edge1);
	v = dot(r.direction, qvec) * inv_det;
	if (v < 0.0 || (u + v) > 1.0) {
		return -1;
	}

	// Compute t
	t = dot(edge2, qvec) * inv_det;

	return t;
}


// Intersection ===========================================================
	
int intersect(in Ray ray, inout float resT)
{
	int id = -1;

	for (int i = 0; i < indices.length(); ++i) {
		Triangle tri;
		tri.id = 0;
		tri.materialId = 0;
		tri.vert0 = vec3(vertices[indices[i].x]);
		tri.vert1 = vec3(vertices[indices[i].y]);
		tri.vert2 = vec3(vertices[indices[i].z]);

		float tTri = triangleIntersect(tri, ray);
		if ((tTri > EPSILON) && (tTri < resT))
		{
			id = tri.id;
			resT = tTri;
		}
	}
	
	return id;
}

vec3 renderScene(inout Ray ray)
{
	vec3 color = vec3(0.0);
	float t = MAXLEN;

	// Get intersected object ID
	int objectID = intersect(ray, t);
	
	if (objectID == -1)
	{
		return color;
	}
	
	vec3 pos = ray.origin + t * ray.direction;
	vec3 lightVec = normalize(ubo.lightPos - pos);				

	// Triangle

	vec3 normal;
	if (objectID == 0) {
		normal = vec3(0, 0, -1);
		float diffuse = lightDiffuse(normal, lightVec);
		color = vec3(1, 1, 0) * diffuse;	
	}

	// Reflect ray for next render pass
	reflectRay(ray.direction, normal);
	ray.origin = pos;	
	
	return color;
}

// Generate ray ========================

void castRayFromCamera(in int width, in int height, inout Ray ray) 
{
	uint x = gl_GlobalInvocationID.x;
	uint y =  gl_GlobalInvocationID.y;
	if (x < width && y < height) {
		ray.origin = camera.position;
		ray.direction = normalize(
			camera.forward 
			- camera.right * camera.pixelLength.x * (float(x) - float(width) * 0.5)
			- camera.up * camera.pixelLength.y * (float(y) - float(height) * 0.5)
			);
	}
}

void main()
{

	ivec2 dim = imageSize(resultImage);
	vec2 uv = vec2(gl_GlobalInvocationID.xy) / dim;

	camera.position = ubo.position;
	camera.right = vec3(1,0,0);
	camera.up = vec3(0,1,0);
	camera.aspectRatio = dim.x / dim.y;
	camera.lookat = vec3(0, 0, 0);
	camera.forward = normalize(camera.lookat - camera.position);
	camera.fov = 10.0;
	camera.pixelLength = vec2(0.00058, 0.00058);


	Ray ray;
	castRayFromCamera(dim.x, dim.y, ray);		

	// Basic color path
	int id = 0;
	vec3 finalColor = renderScene(ray);
	
	// Reflection
	//if (REFLECTIONS)
	//{
	//	float reflectionStrength = REFLECTIONSTRENGTH;
	//	for (int i = 0; i < RAYBOUNCES; i++)
	//	{
	//		vec3 reflectionColor = renderScene(ray);
	//		finalColor = (1.0 - reflectionStrength) * finalColor + reflectionStrength * mix(reflectionColor, finalColor, 1.0 - reflectionStrength);			
	//		reflectionStrength *= REFLECTIONFALLOFF;
	//	}
	//}

	imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(finalColor, 0.0));
}